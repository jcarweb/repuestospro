const fetch = require('node-fetch');

// Configuraci√≥n
const BASE_URL = 'http://localhost:5000';
const TEST_EMAIL = 'jucarl74@gmail.com';
const TEST_PASSWORD = '123456Aa@';

async function testPromotionFlow() {
  try {
    console.log('üîç Iniciando prueba de flujo de promociones...\n');

    // 1. Login como gestor de tienda
    console.log('1. Iniciando sesi√≥n como gestor de tienda...');
    const loginResponse = await fetch(`${BASE_URL}/api/auth/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        email: TEST_EMAIL,
        password: TEST_PASSWORD
      })
    });

    if (!loginResponse.ok) {
      const errorData = await loginResponse.json();
      console.error('‚ùå Error en login:', errorData);
      return;
    }

    const loginData = await loginResponse.json();
    const token = loginData.token;
    const user = loginData.user;

    console.log('‚úÖ Login exitoso');
    console.log('üë§ Usuario:', user?.name || 'Sin nombre', `(${user?.role || 'Sin rol'})`);
    console.log('üè™ Tiendas asignadas:', user?.stores?.length || 0);
    if (user?.stores && user.stores.length > 0) {
      user.stores.forEach((store, index) => {
        console.log(`   ${index + 1}. ${store.name} (${store.isMainStore ? 'Principal' : 'Sucursal'})`);
      });
    }
    console.log('üîç Datos completos del usuario:', JSON.stringify(user, null, 2));
    console.log('');

    // 2. Verificar acceso a promociones
    console.log('2. Verificando acceso a promociones...');
    const storeId = user?.stores?.[0]?._id;
    console.log('üîç Store ID para verificaci√≥n:', storeId);
    if (!storeId) {
      console.log('‚ùå No hay tienda asignada al usuario');
      return;
    }
    const accessResponse = await fetch(`${BASE_URL}/api/promotions/check-access?storeId=${storeId}`, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });

    if (accessResponse.ok) {
      const accessData = await accessResponse.json();
      console.log('‚úÖ Acceso verificado:', accessData);
    } else {
      const errorData = await accessResponse.json();
      console.error('‚ùå Error verificando acceso:', errorData);
    }
    console.log('');

    // 3. Listar promociones existentes
    console.log('3. Listando promociones existentes...');
    const listResponse = await fetch(`${BASE_URL}/api/promotions?page=1&limit=10`, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });

    console.log('üìä Status de respuesta:', listResponse.status, listResponse.statusText);

    if (listResponse.ok) {
      const listData = await listResponse.json();
      console.log('‚úÖ Promociones listadas exitosamente');
      console.log('üìã Total de promociones:', listData.total || 0);
      console.log('üìÑ P√°ginas totales:', listData.totalPages || 0);
      console.log('üìù Promociones en esta p√°gina:', listData.promotions?.length || 0);
      
      if (listData.promotions && listData.promotions.length > 0) {
        console.log('üìã Primera promoci√≥n:');
        const firstPromo = listData.promotions[0];
        console.log('   - ID:', firstPromo._id);
        console.log('   - Nombre:', firstPromo.name);
        console.log('   - Tienda:', firstPromo.store?.name);
        console.log('   - Activa:', firstPromo.isActive);
        console.log('   - Creada por:', firstPromo.createdBy?.name);
      }
    } else {
      const errorData = await listResponse.json();
      console.error('‚ùå Error listando promociones:', errorData);
    }
    console.log('');

    // 4. Crear una promoci√≥n de prueba
    console.log('4. Creando promoci√≥n de prueba...');
    const testPromotion = {
      name: 'Promoci√≥n de Prueba Debug',
      description: 'Promoci√≥n creada para diagnosticar problemas',
      type: 'percentage',
      discountPercentage: 15,
      products: [], // Se llenar√° despu√©s
      startDate: '2024-12-01',
      endDate: '2024-12-31',
      startTime: '00:00',
      endTime: '23:59',
      isActive: true,
      ribbonText: 'PRUEBA',
      ribbonPosition: 'top-left',
      showOriginalPrice: true,
      showDiscountAmount: true,
      scope: 'store'
    };

    // 5. Obtener productos disponibles
    console.log('5. Obteniendo productos disponibles...');
    const productsResponse = await fetch(`${BASE_URL}/api/products/store-manager/all?limit=10`, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });

    if (productsResponse.ok) {
      const productsData = await productsResponse.json();
      const products = productsData.data?.products || productsData.products || productsData.data || [];
      console.log('‚úÖ Productos obtenidos:', products.length);
      
      if (products.length > 0) {
        testPromotion.products = [products[0]._id];
        console.log('üì¶ Producto seleccionado:', products[0].name);
      } else {
        console.log('‚ö†Ô∏è No hay productos disponibles');
      }
    } else {
      const errorData = await productsResponse.json();
      console.error('‚ùå Error obteniendo productos:', errorData);
    }
    console.log('');

    // 6. Crear la promoci√≥n
    if (testPromotion.products.length > 0) {
      console.log('6. Enviando promoci√≥n de prueba...');
      const createResponse = await fetch(`${BASE_URL}/api/promotions`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(testPromotion)
      });

      console.log('üìä Status de creaci√≥n:', createResponse.status, createResponse.statusText);

      if (createResponse.ok) {
        const createData = await createResponse.json();
        console.log('‚úÖ Promoci√≥n creada exitosamente');
        console.log('üÜî ID de la promoci√≥n:', createData.data._id);
        console.log('üìù Nombre:', createData.data.name);
      } else {
        const errorData = await createResponse.json();
        console.error('‚ùå Error creando promoci√≥n:', errorData);
      }
      console.log('');

      // 7. Verificar que la promoci√≥n aparece en la lista
      console.log('7. Verificando que la promoci√≥n aparece en la lista...');
      const verifyResponse = await fetch(`${BASE_URL}/api/promotions?page=1&limit=10`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      if (verifyResponse.ok) {
        const verifyData = await verifyResponse.json();
        console.log('‚úÖ Lista actualizada');
        console.log('üìã Total de promociones:', verifyData.total || 0);
        console.log('üìù Promociones en esta p√°gina:', verifyData.promotions?.length || 0);
        
        // Buscar la promoci√≥n reci√©n creada
        const newPromotion = verifyData.promotions?.find(p => p.name === testPromotion.name);
        if (newPromotion) {
          console.log('‚úÖ Promoci√≥n encontrada en la lista:');
          console.log('   - ID:', newPromotion._id);
          console.log('   - Nombre:', newPromotion.name);
          console.log('   - Tienda:', newPromotion.store?.name);
          console.log('   - Activa:', newPromotion.isActive);
        } else {
          console.log('‚ùå La promoci√≥n no aparece en la lista');
          console.log('üîç Promociones disponibles:');
          verifyData.promotions?.forEach((p, i) => {
            console.log(`   ${i + 1}. ${p.name} (${p.store?.name})`);
          });
        }
      } else {
        const errorData = await verifyResponse.json();
        console.error('‚ùå Error verificando lista:', errorData);
      }
    }

  } catch (error) {
    console.error('‚ùå Error general:', error);
  }
}

// Ejecutar la prueba
testPromotionFlow();
