const axios = require('axios');

// Configuraci√≥n
const API_URL = 'http://127.0.0.1:5000/api';
const FRONTEND_URL = 'http://127.0.0.1:5173';

async function testFrontend2FA() {
  try {
    console.log('üåê Probando flujo completo de 2FA desde el frontend...\n');
    
    // 1. Crear un usuario de prueba
    const timestamp = Date.now();
    const userData = {
      name: 'Usuario Frontend 2FA',
      email: `frontend2fa${timestamp}@test.com`,
      password: 'Test123!',
      phone: '1234567890',
      role: 'client'
    };

    console.log('1. üìù Creando usuario de prueba...');
    console.log(`   üìß Email: ${userData.email}`);
    
    const registerResponse = await axios.post(`${API_URL}/auth/register`, userData);
    console.log('   ‚úÖ Usuario creado exitosamente');

    // 2. Hacer login
    console.log('\n2. üîê Haciendo login...');
    const loginResponse = await axios.post(`${API_URL}/auth/login`, {
      email: userData.email,
      password: userData.password
    });
    
    const token = loginResponse.data.data.token;
    console.log('   ‚úÖ Login exitoso');

    // 3. Obtener perfil del usuario
    console.log('\n3. üë§ Obteniendo perfil del usuario...');
    const headers = {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json'
    };

    const profileResponse = await axios.get(`${API_URL}/profile`, { headers });
    console.log('   ‚úÖ Perfil obtenido');
    console.log(`   - 2FA habilitado: ${profileResponse.data.data.twoFactorEnabled ? 'S√≠' : 'No'}`);

    // 4. Probar activaci√≥n de 2FA
    console.log('\n4. üîê Activando 2FA...');
    const twoFactorResponse = await axios.put(`${API_URL}/profile/two-factor`, {
      enabled: true
    }, { headers });

    console.log('   ‚úÖ 2FA activado exitosamente');
    console.log('   üìã Datos generados:');
    console.log(`   - Secret: ${twoFactorResponse.data.data.secret}`);
    console.log(`   - Backup Codes: ${twoFactorResponse.data.data.backupCodes.length} c√≥digos`);
    console.log(`   - Google Auth URL: ${twoFactorResponse.data.data.googleAuthUrl ? '‚úÖ Generada' : '‚ùå No generada'}`);

    // 5. Verificar que el perfil se actualiz√≥
    console.log('\n5. üîç Verificando actualizaci√≥n del perfil...');
    const updatedProfileResponse = await axios.get(`${API_URL}/profile`, { headers });
    console.log(`   - 2FA habilitado: ${updatedProfileResponse.data.data.twoFactorEnabled ? 'S√≠' : 'No'}`);

    // 6. Probar verificaci√≥n con c√≥digo de respaldo
    console.log('\n6. üîê Probando verificaci√≥n con c√≥digo de respaldo...');
    const backupCode = twoFactorResponse.data.data.backupCodes[0];
    console.log(`   üìã Usando c√≥digo de respaldo: ${backupCode}`);
    
    try {
      const verifyResponse = await axios.put(`${API_URL}/profile/two-factor`, {
        enabled: true,
        code: backupCode
      }, { headers });
      
      console.log('   ‚úÖ Verificaci√≥n exitosa');
    } catch (error) {
      console.log(`   ‚ùå Error en verificaci√≥n: ${error.response?.data?.message || error.message}`);
    }

    // 7. Probar desactivaci√≥n de 2FA
    console.log('\n7. üîê Desactivando 2FA...');
    const disableResponse = await axios.put(`${API_URL}/profile/two-factor`, {
      enabled: false
    }, { headers });
    
    console.log('   ‚úÖ 2FA desactivado exitosamente');

    // 8. Verificar que el perfil se actualiz√≥
    console.log('\n8. üîç Verificando desactivaci√≥n...');
    const finalProfileResponse = await axios.get(`${API_URL}/profile`, { headers });
    console.log(`   - 2FA habilitado: ${finalProfileResponse.data.data.twoFactorEnabled ? 'S√≠' : 'No'}`);

    console.log('\nüéâ ¬°Prueba del flujo completo completada!');
    console.log('\nüì± Para probar en el frontend:');
    console.log(`1. Ve a ${FRONTEND_URL}`);
    console.log(`2. Inicia sesi√≥n con: ${userData.email} / ${userData.password}`);
    console.log('3. Ve a la secci√≥n de Seguridad');
    console.log('4. Haz clic en "Configurar" en la secci√≥n de Autenticaci√≥n de dos factores');
    console.log('5. Escanea el c√≥digo QR con Google Authenticator');
    console.log('6. Ingresa el c√≥digo de 6 d√≠gitos para verificar');
    
    // 9. Mostrar informaci√≥n para pruebas manuales
    console.log('\nüîß Informaci√≥n para pruebas manuales:');
    console.log(`   - Email: ${userData.email}`);
    console.log(`   - Password: ${userData.password}`);
    console.log(`   - Secret: ${twoFactorResponse.data.data.secret}`);
    console.log(`   - Backup Codes: ${twoFactorResponse.data.data.backupCodes.join(', ')}`);
    console.log(`   - Google Auth URL: ${twoFactorResponse.data.data.googleAuthUrl}`);
    
  } catch (error) {
    console.error('‚ùå Error en la prueba:', error.response?.data || error.message);
    if (error.response?.data) {
      console.error('üìã Detalles del error:', JSON.stringify(error.response.data, null, 2));
    }
  }
}

// Ejecutar prueba
testFrontend2FA();
