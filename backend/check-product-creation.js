const mongoose = require('mongoose');
require('dotenv').config();

// Conectar a MongoDB
mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/piezasya', {
  useNewUrlParser: true,
  useUnifiedTopology: true
});

// Importar modelos
const Product = require('./src/models/Product');
const Store = require('./src/models/Store');
const ContentFilter = require('./src/models/ContentFilter');

async function checkProductCreation() {
  try {
    console.log('üîç Verificando configuraci√≥n para creaci√≥n de productos...');
    
    // 1. Verificar conexi√≥n a MongoDB
    console.log('‚úÖ Conexi√≥n a MongoDB establecida');
    
    // 2. Verificar si existe al menos una tienda
    const stores = await Store.find({ isActive: true }).limit(1);
    if (stores.length === 0) {
      console.log('‚ùå No se encontraron tiendas activas');
      return;
    }
    const testStore = stores[0];
    console.log('‚úÖ Tienda encontrada:', testStore.name);
    
    // 3. Verificar configuraci√≥n de ContentFilter
    const contentFilters = await ContentFilter.find({ isActive: true });
    console.log('üìã Filtros de contenido activos:', contentFilters.length);
    
    // 4. Verificar configuraci√≥n de Cloudinary
    console.log('‚òÅÔ∏è Configuraci√≥n Cloudinary:');
    console.log('  - CLOUDINARY_CLOUD_NAME:', process.env.CLOUDINARY_CLOUD_NAME ? 'Configurado' : 'No configurado');
    console.log('  - CLOUDINARY_API_KEY:', process.env.CLOUDINARY_API_KEY ? 'Configurado' : 'No configurado');
    console.log('  - CLOUDINARY_API_SECRET:', process.env.CLOUDINARY_API_SECRET ? 'Configurado' : 'No configurado');
    
    // 5. Probar creaci√≥n de producto sin im√°genes
    console.log('üß™ Probando creaci√≥n de producto sin im√°genes...');
    
    const testProductData = {
      name: 'Producto de Prueba',
      description: 'Descripci√≥n de prueba sin informaci√≥n de contacto',
      price: 100,
      category: 'Motor',
      brand: 'Toyota',
      subcategory: 'Frenos',
      sku: `TEST-${Date.now()}`,
      originalPartCode: 'TEST-001',
      stock: 10,
      isActive: true,
      isFeatured: false,
      tags: ['test', 'motor'],
      specifications: { test: 'valor' },
      images: [],
      store: testStore._id,
      createdBy: testStore.owner || testStore._id
    };
    
    console.log('üìù Datos del producto de prueba:', testProductData);
    
    const testProduct = new Product(testProductData);
    await testProduct.save();
    
    console.log('‚úÖ Producto de prueba creado exitosamente');
    console.log('‚úÖ Producto ID:', testProduct._id);
    
    // 6. Limpiar producto de prueba
    await Product.findByIdAndDelete(testProduct._id);
    console.log('üßπ Producto de prueba eliminado');
    
    console.log('üéâ Todas las verificaciones pasaron exitosamente');
    
  } catch (error) {
    console.error('‚ùå Error durante la verificaci√≥n:', error);
    console.error('‚ùå Error details:', {
      name: error.name,
      message: error.message,
      code: error.code,
      stack: error.stack
    });
  } finally {
    await mongoose.disconnect();
    console.log('üîå Conexi√≥n a MongoDB cerrada');
  }
}

checkProductCreation();
