const fetch = require('node-fetch');

// Configuraci√≥n
const BASE_URL = 'http://localhost:5000/api';
const TOKEN = 'test'; // Reemplazar con un token v√°lido

async function testPromotionCreation() {
  console.log('üß™ Probando creaci√≥n y carga de promociones...\n');

  const headers = {
    'Authorization': `Bearer ${TOKEN}`,
    'Content-Type': 'application/json'
  };

  try {
    // 1. Primero, cargar promociones existentes
    console.log('1Ô∏è‚É£ Cargando promociones existentes...');
    const loadResponse = await fetch(`${BASE_URL}/promotions?page=1&limit=10`, { headers });
    const loadData = await loadResponse.json();
    
    console.log('Status:', loadResponse.status);
    console.log('Promociones existentes:', loadData.promotions?.length || 0);
    console.log('Estructura de respuesta:', {
      success: loadData.success,
      hasPromotions: !!loadData.promotions,
      promotionsIsArray: Array.isArray(loadData.promotions),
      totalPages: loadData.totalPages,
      total: loadData.total
    });
    console.log('');

    // 2. Crear una nueva promoci√≥n de prueba
    console.log('2Ô∏è‚É£ Creando nueva promoci√≥n...');
    const testPromotion = {
      name: 'Promoci√≥n de Prueba',
      description: 'Esta es una promoci√≥n de prueba para verificar la funcionalidad',
      type: 'percentage',
      discountPercentage: 15,
      products: [], // Se necesitar√≠an IDs de productos reales
      startDate: '2024-01-01',
      startTime: '00:00',
      endDate: '2024-12-31',
      endTime: '23:59',
      isActive: true,
      ribbonText: 'PRUEBA',
      ribbonPosition: 'top-left',
      showOriginalPrice: true,
      showDiscountAmount: true,
      maxUses: 100,
      scope: 'store'
    };

    const createResponse = await fetch(`${BASE_URL}/promotions`, {
      method: 'POST',
      headers,
      body: JSON.stringify(testPromotion)
    });

    const createData = await createResponse.json();
    console.log('Status:', createResponse.status);
    console.log('Respuesta de creaci√≥n:', {
      success: createData.success,
      message: createData.message,
      hasData: !!createData.data,
      promotionId: createData.data?._id
    });
    console.log('');

    // 3. Cargar promociones nuevamente para verificar que se agreg√≥
    console.log('3Ô∏è‚É£ Cargando promociones despu√©s de crear...');
    const loadAfterResponse = await fetch(`${BASE_URL}/promotions?page=1&limit=10`, { headers });
    const loadAfterData = await loadAfterResponse.json();
    
    console.log('Status:', loadAfterResponse.status);
    console.log('Promociones despu√©s de crear:', loadAfterData.promotions?.length || 0);
    console.log('Estructura de respuesta:', {
      success: loadAfterData.success,
      hasPromotions: !!loadAfterData.promotions,
      promotionsIsArray: Array.isArray(loadAfterData.promotions),
      totalPages: loadAfterData.totalPages,
      total: loadAfterData.total
    });

    // 4. Verificar si la nueva promoci√≥n est√° en la lista
    if (loadAfterData.promotions && Array.isArray(loadAfterData.promotions)) {
      const newPromotion = loadAfterData.promotions.find(p => p.name === 'Promoci√≥n de Prueba');
      console.log('Nueva promoci√≥n encontrada:', !!newPromotion);
      if (newPromotion) {
        console.log('Detalles de la nueva promoci√≥n:', {
          id: newPromotion._id,
          name: newPromotion.name,
          type: newPromotion.type,
          isActive: newPromotion.isActive
        });
      }
    }

    // Resumen
    console.log('\nüìä RESUMEN:');
    console.log(`‚úÖ Promociones antes: ${loadData.promotions?.length || 0}`);
    console.log(`‚úÖ Promociones despu√©s: ${loadAfterData.promotions?.length || 0}`);
    console.log(`‚úÖ Creaci√≥n exitosa: ${createData.success ? 'S√ç' : 'NO'}`);

  } catch (error) {
    console.error('‚ùå Error durante las pruebas:', error.message);
  }
}

// Ejecutar pruebas
testPromotionCreation();
